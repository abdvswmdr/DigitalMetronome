Creating Visual Diagrams (.drawio) 
When working with technical concepts, visual diagrams are invaluable. Please create appropriate diagrams using draw.io XML format based on the topic. The diagrams should be clean, professional, and focused on clearly communicating the technical concepts.

*** Diagram Types to Consider
Choose the appropriate diagram type based on the content or what the prompt user specifies:

**** UML Diagrams
- Class diagrams (showing classes, attributes, methods, relationships)
- Sequence diagrams (showing object interactions arranged in time sequence)
- State diagrams (showing states, state transitions, and events)
- Activity diagrams (showing workflow of stepwise activities and actions)
- Object diagrams (showing instances rather than classes)
- Component diagrams (showing components and dependencies)

**** System Architecture Diagrams
- System context diagrams (showing system boundaries and external entities)
- Container diagrams (showing high-level technology choices)
- Component diagrams (showing internal components and their interactions)
- Deployment diagrams (showing hardware/infrastructure deployment)

**** Process Flow Diagrams
- Business process flows
- Algorithm flowcharts
- Decision trees

*** Specific Requirements for Draw.io XML (Very Important)
When generating draw.io diagrams:

1. Start with the proper XML declaration: ~<?xml version="1.0" encoding="UTF-8"?>~
2. Use the standard mxfile wrapper structure that draw.io expects:
   ```xml
   <mxfile host="app.diagrams.net" modified="2023-05-14T12:00:00.000Z" agent="5.0 (Windows)" etag="uniqueID" version="15.0.0" type="device">
     <diagram id="DiagramID" name="DiagramName">
       <mxGraphModel dx="1200" dy="800" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1">
         <root>
           <mxCell id="0"/>
           <mxCell id="1" parent="0"/>
           <!-- Diagram content goes here -->
         </root>
       </mxGraphModel>
     </diagram>
   </mxfile>
   ```
3. Avoid using CDATA tags - draw.io doesn't expect them and they cause parsing errors
4. Use proper mxCell elements for all objects and connections
5. Give each element a unique ID (sequential numbering is fine)
6. Use consistent styling for similar elements

*** Common Problems and Solutions
**** Encoding Issues
If seeing errors like "Failed to execute 'atob' on 'Window'", ensure:
- The XML is properly formatted without CDATA tags
- The content is not base64 encoded directly in the XML (draw.io will handle this)
- All special characters are properly escaped

**** Layout Tips
- Use appropriate spacing between elements (usually gridSize="10")
- Group related elements visually
- Use colors strategically (not too many)
- Keep lines straight with minimal crossings
- Include a clear title for the diagram

*** Element Structure for Common Diagram Types
**** For Class Diagrams
```xml
<!-- Class -->
<mxCell id="2" value="ClassName" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;fillColor=#ffffcc;strokeColor=#000000;" vertex="1" parent="1">
  <mxGeometry x="100" y="20" width="160" height="112" as="geometry" />
</mxCell>
<!-- Attribute -->
<mxCell id="3" value="+ attribute: type" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" vertex="1" parent="2">
  <mxGeometry y="26" width="160" height="26" as="geometry" />
</mxCell>
<!-- Line separator -->
<mxCell id="4" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;strokeColor=inherit;" vertex="1" parent="2">
  <mxGeometry y="52" width="160" height="8" as="geometry" />
</mxCell>
<!-- Method -->
<mxCell id="5" value="+ method(param): returnType" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" vertex="1" parent="2">
  <mxGeometry y="60" width="160" height="26" as="geometry" />
</mxCell>
```

**** For Sequence Diagrams
```xml
<!-- Actor -->
<mxCell id="2" value="Actor" style="shape=umlActor;verticalLabelPosition=bottom;verticalAlign=top;html=1;fillColor=#FFFFFF;strokeColor=#000000;" vertex="1" parent="1">
  <mxGeometry x="75" y="40" width="30" height="60" as="geometry"/>
</mxCell>

<!-- Object -->
<mxCell id="3" value=":ClassName" style="html=1;align=center;verticalAlign=middle;rounded=0;fillColor=#FFFFFF;strokeColor=#000000;" vertex="1" parent="1">
  <mxGeometry x="160" y="40" width="120" height="60" as="geometry"/>
</mxCell>

<!-- Lifeline -->
<mxCell id="4" value="" style="html=1;points=[];perimeter=orthogonalPerimeter;fillColor=#FFFFFF;strokeColor=#000000;" vertex="1" parent="1">
  <mxGeometry x="85" y="130" width="10" height="200" as="geometry"/>
</mxCell>

<!-- Message -->
<mxCell id="5" value="methodCall()" style="html=1;verticalAlign=bottom;endArrow=block;rounded=0;" edge="1" parent="1" source="4" target="6">
  <mxGeometry relative="1" as="geometry">
    <mxPoint as="offset"/>
  </mxGeometry>
</mxCell>
```

**** For State Diagrams
```xml
<!-- Initial state -->
<mxCell id="2" value="" style="ellipse;fillColor=#000000;strokeColor=none;" vertex="1" parent="1">
  <mxGeometry x="395" y="70" width="30" height="30" as="geometry"/>
</mxCell>

<!-- State -->
<mxCell id="3" value="State" style="rounded=1;whiteSpace=wrap;html=1;arcSize=40;fontColor=#000000;fillColor=#ffffc0;strokeColor=#000000;" vertex="1" parent="1">
  <mxGeometry x="350" y="130" width="120" height="40" as="geometry"/>
</mxCell>

<!-- Transition -->
<mxCell id="4" value="event" style="edgeStyle=orthogonalEdgeStyle;html=1;verticalAlign=bottom;endArrow=open;endSize=8;strokeColor=#000000;rounded=0;" edge="1" source="2" target="3" parent="1">
  <mxGeometry relative="1" as="geometry"/>
</mxCell>
```

*** Specific Tips for Different LLMs
**** For Smaller Models (GPT-3.5, Smaller Claude Models)
- Break down the diagram request into smaller components
- First ask for a description of what should be in the diagram
- Then request the actual XML structure for just a few elements at a time
- Provide specific element templates from above for the model to follow
- If you get incomplete XML, ask for specific sections

**** For More Capable Models (GPT-4, Claude 3-Sonnet)
- You can directly request complete diagrams
- Specify details like colors, layout preferences, and specific elements
- Request specific diagram types with domain-specific content
- Ask for explanations along with the diagram

*** Example Prompts for Diagrams
Example 1 (Simple): "Create a draw.io UML class diagram showing the relationship between Car, Vehicle, and Motorcycle classes, where Vehicle is the parent class."

Example 2 (Detailed): "Create a draw.io sequence diagram showing the interaction when a user clicks a map in the navigation GUI. Include components: User, GUI, EventFilter, NavigationController, and ActionClient."

Example 3 (Complex): "Create a draw.io state diagram for the robot navigation system, showing states like Idle, Planning, Navigating, Recovery, and GoalReached with appropriate transitions between them."

*** Output Save Instructions
After receiving the XML for the diagram:
1. Save it to a file with the .drawio extension
2. Open it with draw.io (via diagrams.net website or the desktop app)
3. If creating a diagram for documentation, export as PNG or SVG for inclusion

*** Advanced Features to Request
- Layer organization for complex diagrams
- Custom styles and color schemes
- Grouped elements for logical organization
- Embedded links or references to other diagrams
- Custom shapes or icons for domain-specific elements





https://drawio-app.com/blog/connector-styles-and-animations-in-draw-io/
Connector styles and animations in draw.io
By Kymberly Fergusson

October 8, 2018

Categories: feature, learning

Lines, connectors, arrows, transitions – these are the glue that hold diagrams together. They make your diagram make sense. There are many different styles you can use on your connectors – different connection point styles or arrow heads, different line styles, colors, curve styles and more. Styling your connectors will help make your diagrams more readable.

Arrow heads and connection symbols
There are different styles of arrow heads, which also include diamonds, circles and other notations used in UML diagrams, electrical diagrams and more.

Select your connector, then look in the format panel on the right – there is a huge list of connection styles or arrows you can use for both the start and the end of your connector. Choose an arrow or connection symbol from the start and end drop-down lists.

Alternatively, you can use the connector shapes (with arrows attached) from the General or Misc shape libraries in the left pane.

Once you have chosen a certain style, when you draw a new connector, it will use that style.


Open this in draw.io

Line styles
There are several different line styles that you can use for your connectors,  found in the Style tab of the format panel on the right. Select a connector then select the line style from the second drop down selector.

Double-line connectors and a larger arrow outline shape are available in the first drop down selector in the format panel, from in the General shape library on the left, or in the toolbar above.


Open this in draw.io

Filled double line connectors are available from the Misc shape library (the Filled edge shape). These are ideal to use as water pipes – red for hot water, blue for cold – or any other types of ‘pipes’.

Where connectors cross over each other, you can use line jumps to make it clear that they don’t intersect. In the format panel, you can choose between no line jumps, or to style your line jumps as an arc, a gap, or a sharp ‘bend’.


Open this in draw.io

Connector colors
You can change the connector colors easily – use the palette in the Style panel, or click on the color box.


Open this in draw.io

Waypoints
Waypoints are used to add curves or bends to connectors. Simply click and drag one of the light blue waypoints to add a new waypoint and reshape your connector.

To remove a single waypoint, drag it so that it is in line with the waypoints on either side. You can also select the connector, right click and select Clear Waypoints from the context menu to remove all waypoints.

For connectors with bends or waypoints in them, you can choose to style the bends as sharp, rounded or curved.


Open this in draw.io


Animate the connectors
Animating your connectors is great for demonstrating directional flow charts, electrical circuits and more. To animate your connectors:

Click on the connector you wish to animate. Hold Ctrl or Cmd and click to select multiple connectors
On the right-hand side go to Style > Property and click on the arrow to expand the field
Scroll down to Flow Animation and check the box

Working with connectors
We’ve covered the different styles of connectors in this post, but in previous posts, we’ve also explained how to work with connectors:

See the difference between floating and fixed connections, and learn how to use them.
Learn how to connect shapes together in four different ways in draw.io.
Review this tutorial exercise for working with text and connectors.
Share this story
Related posts

Signifying associative entities in draw.io
Connections hold together what belongs together. Connections show sequences, or draw your attention to essential [...]

Read more

draw.io Training – Exercise 5: Create a tree diagram
Now that you've learnt how to insert and modify shapes, add text and use connectors, it's time to put it all together. In this exercise you'll learn some more advanced formatting options by using the format panel on the right hand side.

Read more

draw.io Training – Exercise 4: Work with text and connectors
Now that you are comfortable modifying an existing diagram by editing shapes, it's time to build one from scratch. You'll need to add shapes from the symbol library, draw connections between the shapes, and add text to both the shapes and the connectors.


https://www.drawio.com/doc/faq/connector-animate
Animate connectors
Select the connectors you wish to animate. Right-click and choose Select Edges if you wish to animate all connectors.
In the Style tab of the format panel, enable Flow Animation.


The connectors will now appear as if they have dashes moving from the source connection point to the target connection point.

Expand the Properties to see more connector flow animation settings. Here,yYou can change the Flow Duration, Flow Timing and Flow Direction.


Export your diagram to a SVG file to include the connector animation when you publish it in a web page or on a content platform that supports SVG images.

